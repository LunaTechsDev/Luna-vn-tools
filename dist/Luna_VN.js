/** ============================================================================
 *
 *  Luna_VN.js
 * 
 *  Build Date: 10/31/2020
 * 
 *  Made with LunaTea -- Haxe
 *
 * =============================================================================
*/
// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc A plugin that adds Visual Novel support in MV/MZ <LunaVN>. 

@target MV MZ

@command callEvent
@text Call Event
@desc Allows you to call an event from any map with any event ID

@param bustLimit
@text Bust Limit
@desc The limit of how many busts to show on screen at one time.
If more than the max are used, the oldest bust will be replaced by
the new one.
@default 8

@param breathingAnim
@text Breathing Animation
@desc Whether the busts will have a breathing animation when on screen.
@default true

@help
==== How To Use ====


MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

(function ($hx_exports, $global) {
  "use strict";
  var $estr = function () {
      return js_Boot.__string_rec(this, "");
    },
    $hxEnums = $hxEnums || {},
    $_;
  class EReg {
    constructor(r, opt) {
      this.r = new RegExp(r, opt.split("u").join(""));
    }
    match(s) {
      if (this.r.global) {
        this.r.lastIndex = 0;
      }
      this.r.m = this.r.exec(s);
      this.r.s = s;
      return this.r.m != null;
    }
  }

  EReg.__name__ = true;
  Math.__name__ = true;
  class Std {
    static string(s) {
      return js_Boot.__string_rec(s, "");
    }
  }

  Std.__name__ = true;
  class core_Amaryllis {
    static lerp(start, end, amount) {
      return start + (end - start) * amount;
    }
  }

  core_Amaryllis.__name__ = true;
  class haxe_Log {
    static formatOutput(v, infos) {
      let str = Std.string(v);
      if (infos == null) {
        return str;
      }
      let pstr = infos.fileName + ":" + infos.lineNumber;
      if (infos.customParams != null) {
        let _g = 0;
        let _g1 = infos.customParams;
        while (_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
      }
      return pstr + ": " + str;
    }
    static trace(v, infos) {
      let str = haxe_Log.formatOutput(v, infos);
      if (typeof console != "undefined" && console.log != null) {
        console.log(str);
      }
    }
  }

  haxe_Log.__name__ = true;
  class haxe_iterators_ArrayIterator {
    constructor(array) {
      this.current = 0;
      this.array = array;
    }
    hasNext() {
      return this.current < this.array.length;
    }
    next() {
      return this.array[this.current++];
    }
  }

  haxe_iterators_ArrayIterator.__name__ = true;
  class js_Boot {
    static __string_rec(o, s) {
      if (o == null) {
        return "null";
      }
      if (s.length >= 5) {
        return "<...>";
      }
      let t = typeof o;
      if (t == "function" && (o.__name__ || o.__ename__)) {
        t = "object";
      }
      switch (t) {
        case "function":
          return "<function>";
        case "object":
          if (o.__enum__) {
            let e = $hxEnums[o.__enum__];
            let n = e.__constructs__[o._hx_index];
            let con = e[n];
            if (con.__params__) {
              s = s + "\t";
              return (
                n +
                "(" +
                (function ($this) {
                  var $r;
                  let _g = [];
                  {
                    let _g1 = 0;
                    let _g2 = con.__params__;
                    while (true) {
                      if (!(_g1 < _g2.length)) {
                        break;
                      }
                      let p = _g2[_g1];
                      _g1 = _g1 + 1;
                      _g.push(js_Boot.__string_rec(o[p], s));
                    }
                  }
                  $r = _g;
                  return $r;
                })(this).join(",") +
                ")"
              );
            } else {
              return n;
            }
          }
          if (o instanceof Array) {
            let str = "[";
            s += "\t";
            let _g = 0;
            let _g1 = o.length;
            while (_g < _g1) {
              let i = _g++;
              str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i], s);
            }
            str += "]";
            return str;
          }
          let tostr;
          try {
            tostr = o.toString;
          } catch (_g) {
            return "???";
          }
          if (
            tostr != null &&
            tostr != Object.toString &&
            typeof tostr == "function"
          ) {
            let s2 = o.toString();
            if (s2 != "[object Object]") {
              return s2;
            }
          }
          let str = "{\n";
          s += "\t";
          let hasp = o.hasOwnProperty != null;
          let k = null;
          for (k in o) {
            if (hasp && !o.hasOwnProperty(k)) {
              continue;
            }
            if (
              k == "prototype" ||
              k == "__class__" ||
              k == "__super__" ||
              k == "__interfaces__" ||
              k == "__properties__"
            ) {
              continue;
            }
            if (str.length != 2) {
              str += ", \n";
            }
            str += s + k + " : " + js_Boot.__string_rec(o[k], s);
          }
          s = s.substring(1);
          str += "\n" + s + "}";
          return str;
        case "string":
          return o;
        default:
          return String(o);
      }
    }
  }

  js_Boot.__name__ = true;

  class utils_Fn {
    static proto(obj) {
      return obj.prototype;
    }
    static updateProto(obj, fn) {
      return fn(obj.prototype);
    }
    static updateEntity(obj, fn) {
      return fn(obj);
    }
  }

  utils_Fn.__name__ = true;
  class LunaVN {
    static main() {
      let _g = [];
      let _g1 = 0;
      let _g2 = $plugins;
      while (_g1 < _g2.length) {
        let v = _g2[_g1];
        ++_g1;
        if (new EReg("<LunaVN>", "ig").match(v.description)) {
          _g.push(v);
        }
      }
      let plugin = _g[0];
      let params = plugin.parameters;
      LunaVN.Params = {
        bustLimit: parseInt(params["bustLimit"], 10),
        breathingAnim: params["breathingAnim"].toLowerCase().trim() == "true",
      };
      haxe_Log.trace(LunaVN.Params, {
        fileName: "src/visnov/Main.hx",
        lineNumber: 31,
        className: "visnov.Main",
        methodName: "main",
      });

      //=============================================================================
      // Scene_Map
      //=============================================================================
      let _Scene_Map__lvnBusts = Scene_Map.prototype._lvnBusts;
      Scene_Map.prototype._lvnBusts = null;
      let _Scene_Map__lvnListener = Scene_Map.prototype._lvnListener;
      Scene_Map.prototype._lvnListener = null;
      let _Scene_Map__lvnBackdropSprite =
        Scene_Map.prototype._lvnBackdropSprite;
      Scene_Map.prototype._lvnBackdropSprite = null;
      let _Scene_Map__lvnScreenPicSprite =
        Scene_Map.prototype._lvnScreenPicSprite;
      Scene_Map.prototype._lvnScreenPicSprite = null;
      let _Scene_Map__shadowBackdropOpacity =
        Scene_Map.prototype._shadowBackdropOpacity;
      Scene_Map.prototype._shadowBackdropOpacity = null;
      let _Scene_Map__shadowScreenPicOpacity =
        Scene_Map.prototype._shadowScreenPicOpacity;
      Scene_Map.prototype._shadowScreenPicOpacity = null;
      let _Scene_Map_initialize = Scene_Map.prototype.initialize;
      Scene_Map.prototype.initialize = function () {
        _Scene_Map_initialize.call(this);
        this._lvnBusts = [];
        this._lvnListener = new PIXI.utils.EventEmitter();
        this._shadowBackdropOpacity = 0;
        this._shadowScreenPicOpacity = 0;
        this.setupBackdropEvents();
        this.setupScreenPicEvents();
      };
      let _Scene_Map_createDisplayObjects =
        Scene_Map.prototype.createDisplayObjects;
      Scene_Map.prototype.createDisplayObjects = function () {
        _Scene_Map_createDisplayObjects.call(this);
        this.createLVNBackdropSprite();
        this.createLVNScreenPicSprite();
      };
      let _Scene_Map_createLVNBackdropSprite =
        Scene_Map.prototype.createLVNBackdropSprite;
      Scene_Map.prototype.createLVNBackdropSprite = function () {
        this._lvnBackdropSprite = new Sprite();
        this._lvnBackdropSprite.opacity = 0;
        this.addChildAt(this._lvnBackdropSprite, 1);
      };
      let _Scene_Map_createLVNScreenPicSprite =
        Scene_Map.prototype.createLVNScreenPicSprite;
      Scene_Map.prototype.createLVNScreenPicSprite = function () {
        this._lvnScreenPicSprite = new Sprite();
        this._lvnScreenPicSprite.opacity = 0;
        this.addChildAt(this._lvnScreenPicSprite, 1);
      };
      let _Scene_Map_createAllWindows = Scene_Map.prototype.createAllWindows;
      Scene_Map.prototype.createAllWindows = function () {
        _Scene_Map_createAllWindows.call(this);
        this.addBustsToMessageWindow();
      };
      let _Scene_Map_addBustsToMessageWindow =
        Scene_Map.prototype.addBustsToMessageWindow;
      Scene_Map.prototype.addBustsToMessageWindow = function () {
        let _g = 0;
        let _g1 = LunaVN.Params.bustLimit;
        while (_g < _g1) {
          let index = _g++;
          let bust = new LVNSpriteBust(0, 0);
          this.setupBustEvents(bust);
          this._lvnBusts.push(bust);
          this._messageWindow.addChild(bust);
        }
      };
      let _Scene_Map_setupBustEvents = Scene_Map.prototype.setupBustEvents;
      Scene_Map.prototype.setupBustEvents = function (bust) {
        let _gthis = this;
        LunaVN.listener.on("showBust", function (id) {
          let bust = _gthis.bust(id);
          bust.show();
        });
        LunaVN.listener.on("hideBust", function (id) {
          let bust = _gthis.bust(id);
          bust.hide();
        });
        LunaVN.listener.on("moveBustTo", function (id, x, y) {
          let bust = _gthis.bust(id);
          bust.moveTo(x, y);
        });
        LunaVN.listener.on("moveBustBy", function (id, x, y) {
          let bust = _gthis.bust(id);
          bust.moveBy(x, y);
        });
        LunaVN.listener.on("fadeToBust", function (id, opacity, duration) {
          let bust = _gthis.bust(id);
          bust.fadeTo(opacity, duration);
        });
        LunaVN.listener.on("fadeByBust", function (id, opacity, duration) {
          let bust = _gthis.bust(id);
          bust.fadeBy(opacity, duration);
        });
        LunaVN.listener.on("scaleTo", function (id, x, y, duration) {
          let bust = _gthis.bust(id);
          bust.scaleTo(x, y, duration);
        });
        LunaVN.listener.on("setBust", function (id, bustSetName) {
          let bust = _gthis.bust(id);
          bust.setBust(bustSetName);
        });
      };
      let _Scene_Map_setupBackdropEvents =
        Scene_Map.prototype.setupBackdropEvents;
      Scene_Map.prototype.setupBackdropEvents = function () {
        let _gthis = this;
        LunaVN.listener.on("setBackdrop", function (imageName) {
          _gthis.setBackdrop(imageName);
        });
        LunaVN.listener.on("showBackdrop", function () {
          _gthis._shadowBackdropOpacity = 255;
        });
        LunaVN.listener.on("hideBackdrop", function () {
          _gthis._shadowBackdropOpacity = 0;
        });
      };
      let _Scene_Map_setupScreenPicEvents =
        Scene_Map.prototype.setupScreenPicEvents;
      Scene_Map.prototype.setupScreenPicEvents = function () {
        let _gthis = this;
        LunaVN.listener.on("setScreenPic", function (imageName) {
          _gthis.setScreenPicture(imageName);
        });
        LunaVN.listener.on("showScreenPic", function () {
          _gthis._shadowScreenPicOpacity = 255;
        });
        LunaVN.listener.on("hideScreenPic", function () {
          _gthis._shadowScreenPicOpacity = 0;
        });
      };
      let _Scene_Map_bust = Scene_Map.prototype.bust;
      Scene_Map.prototype.bust = function (Id) {
        return this._lvnBusts[Id - 1];
      };
      let _Scene_Map_setBackdrop = Scene_Map.prototype.setBackdrop;
      Scene_Map.prototype.setBackdrop = function (imageName) {
        let _gthis = this;
        let bitmap = ImageManager.loadPicture(imageName);
        bitmap.addLoadListener(function (bitmap) {
          _gthis._lvnBackdropSprite.bitmap = bitmap;
          LunaVN.listener.emit("showBackdrop");
        });
      };
      let _Scene_Map_setScreenPicture = Scene_Map.prototype.setScreenPicture;
      Scene_Map.prototype.setScreenPicture = function (imageName) {
        let _gthis = this;
        let bitmap = ImageManager.loadPicture(imageName);
        bitmap.addLoadListener(function (bitmap) {
          _gthis._lvnScreenPicSprite.bitmap = bitmap;
          LunaVN.listener.emit("showScreenPic");
        });
      };
      let _Scene_Map_update = Scene_Map.prototype.update;
      Scene_Map.prototype.update = function () {
        _Scene_Map_update.call(this);
        this.updateBackdrop();
        this.updateScreenSprite();
      };
      let _Scene_Map_updateBackdrop = Scene_Map.prototype.updateBackdrop;
      Scene_Map.prototype.updateBackdrop = function () {
        let opacityResult = this._lvnBackdropSprite.opacity;
        if (this._shadowBackdropOpacity != this._lvnBackdropSprite.opacity) {
          opacityResult = core_Amaryllis.lerp(
            this._lvnBackdropSprite.opacity,
            this._shadowBackdropOpacity,
            0.045
          );
        }
        if (
          Math.abs(
            this._shadowBackdropOpacity - this._lvnBackdropSprite.opacity
          ) < 0.5
        ) {
          opacityResult = Math.round(opacityResult);
        }
        this._lvnBackdropSprite.opacity = opacityResult;
      };
      let _Scene_Map_updateScreenSprite =
        Scene_Map.prototype.updateScreenSprite;
      Scene_Map.prototype.updateScreenSprite = function () {
        let opacityResult = this._lvnScreenPicSprite.opacity;
        if (this._shadowScreenPicOpacity != this._lvnScreenPicSprite.opacity) {
          opacityResult = core_Amaryllis.lerp(
            this._lvnScreenPicSprite.opacity,
            this._shadowScreenPicOpacity,
            0.045
          );
        }
        if (
          Math.abs(
            this._shadowScreenPicOpacity - this._lvnScreenPicSprite.opacity
          ) < 0.5
        ) {
          opacityResult = Math.round(opacityResult);
        }
        this._lvnScreenPicSprite.opacity = opacityResult;
      };
      let pluginName = plugin.name;
      PluginManager.registerCommand(pluginName, "moveBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.moveBustTo(params.id, params.x, params.y);
      });
      PluginManager.registerCommand(pluginName, "moveBustBy", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.moveBustBy(params.id, params.x, params.y);
      });
      PluginManager.registerCommand(pluginName, "fadeBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.fadeBustTo(params.id, params.opacity, params.duration);
      });
      PluginManager.registerCommand(pluginName, "fadeBustBy", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.fadeBustBy(params.id, params.opacity, params.duration);
      });
      PluginManager.registerCommand(pluginName, "scaleBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.scaleBustTo(params.id, params.x, params.y, params.duration);
      });
      PluginManager.registerCommand(pluginName, "hideBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.hideBust(params.id);
      });
      PluginManager.registerCommand(pluginName, "showBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.showBust(params.id);
      });
      PluginManager.registerCommand(pluginName, "emoteBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.emoteBust(params.id, params.emote);
      });
      PluginManager.registerCommand(pluginName, "animBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.animateBust(params.id, params.animation);
      });
      PluginManager.registerCommand(pluginName, "highlightBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.highlightBust(params.id);
      });
      PluginManager.registerCommand(pluginName, "darkenBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.darkenBust(params.id);
      });
      PluginManager.registerCommand(pluginName, "setBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
      });
    }
    static params() {
      return LunaVN.Params;
    }
    static registerAllPluginCommands(pluginName) {
      PluginManager.registerCommand(pluginName, "moveBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.moveBustTo(params.id, params.x, params.y);
      });
      PluginManager.registerCommand(pluginName, "moveBustBy", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.moveBustBy(params.id, params.x, params.y);
      });
      PluginManager.registerCommand(pluginName, "fadeBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.fadeBustTo(params.id, params.opacity, params.duration);
      });
      PluginManager.registerCommand(pluginName, "fadeBustBy", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.fadeBustBy(params.id, params.opacity, params.duration);
      });
      PluginManager.registerCommand(pluginName, "scaleBustTo", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.scaleBustTo(params.id, params.x, params.y, params.duration);
      });
      PluginManager.registerCommand(pluginName, "hideBust", function (
        jsonParams
      ) {
        LunaVN.hideBust(JsonEx.parse(jsonParams).id);
      });
      PluginManager.registerCommand(pluginName, "showBust", function (
        jsonParams
      ) {
        LunaVN.showBust(JsonEx.parse(jsonParams).id);
      });
      PluginManager.registerCommand(pluginName, "emoteBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.emoteBust(params.id, params.emote);
      });
      PluginManager.registerCommand(pluginName, "animBust", function (
        jsonParams
      ) {
        let params = JsonEx.parse(jsonParams);
        LunaVN.animateBust(params.id, params.animation);
      });
      PluginManager.registerCommand(pluginName, "highlightBust", function (
        jsonParams
      ) {
        LunaVN.highlightBust(JsonEx.parse(jsonParams).id);
      });
      PluginManager.registerCommand(pluginName, "darkenBust", function (
        jsonParams
      ) {
        LunaVN.darkenBust(JsonEx.parse(jsonParams).id);
      });
      PluginManager.registerCommand(pluginName, "setBust", function (
        jsonParams
      ) {
        JsonEx.parse(jsonParams);
      });
    }
    static moveBustTo(id, x, y) {
      LunaVN.listener.emit("moveBustTo", id, x, y);
    }
    static moveBustBy(id, x, y) {
      LunaVN.listener.emit("moveBustBy", id, x, y);
    }
    static hideBust(id) {
      LunaVN.listener.emit("hideBust", id);
    }
    static showBust(id) {
      LunaVN.listener.emit("showBust", id);
    }
    static fadeBustTo(Id, opacity, duration) {
      LunaVN.listener.emit("fadeToBust", Id, opacity, duration);
    }
    static fadeBustBy(id, opacity, duration) {
      LunaVN.listener.emit("fadeByBust", id, opacity, duration);
    }
    static scaleBustTo(id, x, y, duration) {
      LunaVN.listener.emit("scaleTo", x, y, duration);
    }
    static emoteBust(id, emote) {
      LunaVN.listener.emit("emoteBust", id, emote);
    }
    static animateBust(id, animation) {
      LunaVN.listener.emit("animBust", id, animation);
    }
    static highlightBust(id) {
      LunaVN.listener.emit("highlightBust", id);
    }
    static darkenBust(id) {
      LunaVN.listener.emit("darkenBust", id);
    }
    static setBust(id, bustSetName) {}
    static setBackdrop(imageName) {
      LunaVN.listener.emit("setBackdrop", imageName);
    }
    static showBackdrop() {
      LunaVN.listener.emit("showBackdrop");
    }
    static hideBackdrop() {
      LunaVN.listener.emit("hideBackdrop");
    }
    static setScreenPic(imageName) {
      LunaVN.listener.emit("setScreenPic", imageName);
    }
    static showScreenPic() {
      LunaVN.listener.emit("showScreenPic");
    }
    static hideScreenPic() {
      LunaVN.listener.emit("hideScreenPic");
    }
  }

  $hx_exports["LunaVN"] = LunaVN;
  LunaVN.__name__ = true;
  class visnov_Scene_$Map extends Scene_Map {
    constructor() {
      super();
    }
    initialize() {
      _Scene_Map_initialize.call(this);
      this._lvnBusts = [];
      this._lvnListener = new PIXI.utils.EventEmitter();
      this._shadowBackdropOpacity = 0;
      this._shadowScreenPicOpacity = 0;
      this.setupBackdropEvents();
      this.setupScreenPicEvents();
    }
    createDisplayObjects() {
      _Scene_Map_createDisplayObjects.call(this);
      this.createLVNBackdropSprite();
      this.createLVNScreenPicSprite();
    }
    createLVNBackdropSprite() {
      this._lvnBackdropSprite = new Sprite();
      this._lvnBackdropSprite.opacity = 0;
      this.addChildAt(this._lvnBackdropSprite, 1);
    }
    createLVNScreenPicSprite() {
      this._lvnScreenPicSprite = new Sprite();
      this._lvnScreenPicSprite.opacity = 0;
      this.addChildAt(this._lvnScreenPicSprite, 1);
    }
    createAllWindows() {
      _Scene_Map_createAllWindows.call(this);
      this.addBustsToMessageWindow();
    }
    addBustsToMessageWindow() {
      let _g = 0;
      let _g1 = LunaVN.Params.bustLimit;
      while (_g < _g1) {
        ++_g;
        let bust = new LVNSpriteBust(0, 0);
        this.setupBustEvents(bust);
        this._lvnBusts.push(bust);
        this._messageWindow.addChild(bust);
      }
    }
    setupBustEvents(bust) {
      let _gthis = this;
      LunaVN.listener.on("showBust", function (id) {
        _gthis.bust(id).show();
      });
      LunaVN.listener.on("hideBust", function (id) {
        _gthis.bust(id).hide();
      });
      LunaVN.listener.on("moveBustTo", function (id, x, y) {
        _gthis.bust(id).moveTo(x, y);
      });
      LunaVN.listener.on("moveBustBy", function (id, x, y) {
        _gthis.bust(id).moveBy(x, y);
      });
      LunaVN.listener.on("fadeToBust", function (id, opacity, duration) {
        _gthis.bust(id).fadeTo(opacity, duration);
      });
      LunaVN.listener.on("fadeByBust", function (id, opacity, duration) {
        _gthis.bust(id).fadeBy(opacity, duration);
      });
      LunaVN.listener.on("scaleTo", function (id, x, y, duration) {
        _gthis.bust(id).scaleTo(x, y, duration);
      });
      LunaVN.listener.on("setBust", function (id, bustSetName) {
        _gthis.bust(id).setBust(bustSetName);
      });
    }
    setupBackdropEvents() {
      let _gthis = this;
      LunaVN.listener.on("setBackdrop", function (imageName) {
        _gthis.setBackdrop(imageName);
      });
      LunaVN.listener.on("showBackdrop", function () {
        _gthis._shadowBackdropOpacity = 255;
      });
      LunaVN.listener.on("hideBackdrop", function () {
        _gthis._shadowBackdropOpacity = 0;
      });
    }
    setupScreenPicEvents() {
      let _gthis = this;
      LunaVN.listener.on("setScreenPic", function (imageName) {
        _gthis.setScreenPicture(imageName);
      });
      LunaVN.listener.on("showScreenPic", function () {
        _gthis._shadowScreenPicOpacity = 255;
      });
      LunaVN.listener.on("hideScreenPic", function () {
        _gthis._shadowScreenPicOpacity = 0;
      });
    }
    bust(Id) {
      return this._lvnBusts[Id - 1];
    }
    setBackdrop(imageName) {
      let _gthis = this;
      ImageManager.loadPicture(imageName).addLoadListener(function (bitmap) {
        _gthis._lvnBackdropSprite.bitmap = bitmap;
        LunaVN.listener.emit("showBackdrop");
      });
    }
    setScreenPicture(imageName) {
      let _gthis = this;
      ImageManager.loadPicture(imageName).addLoadListener(function (bitmap) {
        _gthis._lvnScreenPicSprite.bitmap = bitmap;
        LunaVN.listener.emit("showScreenPic");
      });
    }
    updateBackdrop() {
      let opacityResult = this._lvnBackdropSprite.opacity;
      if (this._shadowBackdropOpacity != this._lvnBackdropSprite.opacity) {
        opacityResult = core_Amaryllis.lerp(
          this._lvnBackdropSprite.opacity,
          this._shadowBackdropOpacity,
          0.045
        );
      }
      if (
        Math.abs(
          this._shadowBackdropOpacity - this._lvnBackdropSprite.opacity
        ) < 0.5
      ) {
        opacityResult = Math.round(opacityResult);
      }
      this._lvnBackdropSprite.opacity = opacityResult;
    }
    updateScreenSprite() {
      let opacityResult = this._lvnScreenPicSprite.opacity;
      if (this._shadowScreenPicOpacity != this._lvnScreenPicSprite.opacity) {
        opacityResult = core_Amaryllis.lerp(
          this._lvnScreenPicSprite.opacity,
          this._shadowScreenPicOpacity,
          0.045
        );
      }
      if (
        Math.abs(
          this._shadowScreenPicOpacity - this._lvnScreenPicSprite.opacity
        ) < 0.5
      ) {
        opacityResult = Math.round(opacityResult);
      }
      this._lvnScreenPicSprite.opacity = opacityResult;
    }
  }

  visnov_Scene_$Map.__name__ = true;
  var visnov_sprites_MoveType = ($hxEnums["visnov.sprites.MoveType"] = {
    __ename__: true,
    __constructs__: ["Linear"],
    Linear: {
      _hx_index: 0,
      __enum__: "visnov.sprites.MoveType",
      toString: $estr,
    },
  });

  class LVNSpriteBust extends Sprite {
    constructor(x, y, bitmap) {
      super();
      if (bitmap != null) {
        this.bitmap = bitmap;
        this.handleLoading(this.bitmap);
      }
      this.x = x;
      this.y = y;
      this._moveWait = 30;
    }
    setBust(bustSetName) {
      this.bitmap = ImageManager.loadPicture(bustSetName, 0);
      this.handleLoading(this.bitmap);
    }
    handleLoading(bitmap) {
      let _gthis = this;
      bitmap.addLoadListener(function (bitmap) {
        haxe_Log.trace("Loaded Sprite Bust", {
          fileName: "src/visnov/sprites/SpriteBust.hx",
          lineNumber: 48,
          className: "visnov.sprites.SpriteBust",
          methodName: "handleLoading",
        });
        _gthis.show();
      });
    }
    initialize(bitmap) {
      super.initialize(bitmap);
      this._fadeDuration = 0;
      this._shadowOpacity = this.alpha;
      this._shadowX = this.x;
      this._shadowY = this.y;
      this._defaultMoveType = visnov_sprites_MoveType.Linear;
    }
    moveTo(x, y) {
      this._shadowX = x;
      if (y != null) {
        this._shadowY = y;
      }
      this._moveWait = 30;
      haxe_Log.trace("Starting Move", {
        fileName: "src/visnov/sprites/SpriteBust.hx",
        lineNumber: 74,
        className: "visnov.sprites.SpriteBust",
        methodName: "moveTo",
        customParams: [this._moveWait],
      });
    }
    moveBy(x, y) {
      this._shadowX += x;
      if (y != null) {
        this._shadowY += y;
      }
      this._moveWait = 30;
    }
    fadeTo(opacity, duration) {
      if (duration == null) {
        duration = 30;
      }
      this._shadowOpacity = opacity;
      this._fadeDuration = duration;
    }
    fadeBy(opacity, duration) {
      if (duration == null) {
        duration = 30;
      }
      this._shadowOpacity += opacity;
      this._fadeDuration = duration;
    }
    scaleTo(x, y, duration) {
      if (duration == null) {
        duration = 30;
      }
      this.scale.set(x, y);
      this._scaleDuration = duration;
    }
    update() {
      super.update();
      this.updateFade();
      this.updateScaling();
      if (this._moveWait == 0) {
        this.updateMovement();
      }
      if (this._moveWait > 0) {
        this._moveWait--;
      }
    }
    updateFade() {}
    updateScaling() {}
    updateMovement() {
      let xResult = this.x;
      let yResult = this.y;
      if (this._shadowX != this.x) {
        xResult = core_Amaryllis.lerp(this.x, this._shadowX, 0.025);
      }
      if (this._shadowY != this.y) {
        yResult = core_Amaryllis.lerp(this.y, this._shadowY, 0.025);
      }
      if (this._shadowX == this.x && this._shadowY == this.y) {
        this._moveWait = -1;
        haxe_Log.trace("Disable Moving", {
          fileName: "src/visnov/sprites/SpriteBust.hx",
          lineNumber: 135,
          className: "visnov.sprites.SpriteBust",
          methodName: "updateMovement",
        });
      }
      if (Math.abs(this._shadowX - this.x) < 0.5) {
        xResult = Math.round(xResult);
      }
      if (Math.abs(this._shadowY - this.y) < 0.5) {
        yResult = Math.round(yResult);
      }
      this.move(xResult, yResult);
      haxe_Log.trace("Moving", {
        fileName: "src/visnov/sprites/SpriteBust.hx",
        lineNumber: 148,
        className: "visnov.sprites.SpriteBust",
        methodName: "updateMovement",
        customParams: [this.x, this.y],
      });
      this._refresh();
    }
    oscillateSize() {
      let xYResult = Math.abs(Math.sin(new Date().getTime() / 1000) / 2.0);
      this.scale.x = 1 - xYResult;
      this.scale.y = 1 - xYResult;
    }
  }

  $hx_exports["LVNSpriteBust"] = LVNSpriteBust;
  LVNSpriteBust.__name__ = true;
  String.__name__ = true;
  Array.__name__ = true;
  Date.__name__ = "Date";
  js_Boot.__toStr = {}.toString;
  LunaVN.listener = new PIXI.utils.EventEmitter();
  LunaVN.main();
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  {}
);
